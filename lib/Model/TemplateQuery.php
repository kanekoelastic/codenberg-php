<?php
/**
 * TemplateQuery
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * コーデンベルク APIリファレンス
 *
 * 印刷APIプラットフォーム「[コーデンベルク](https://codenberg.io/)」はさまざまなシステムと連携することができるように、WebAPIを公開しています。コーデンベルク APIを使って、印刷物の注文はもちろん、テンプレートの登録や可変領域の設定ができます。コーデンベルク APIは、RESTfulな設計なのでかんたんにシステム連携できます。
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * TemplateQuery Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TemplateQuery implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'TemplateQuery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'q' => 'string',
        'sort' => 'string',
        'direction' => 'string',
        'per_page' => 'int',
        'page' => 'int',
        'including_private' => 'bool',
        'including_custom_fields' => 'bool',
        'including_formats' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'q' => null,
        'sort' => null,
        'direction' => null,
        'per_page' => 'int64',
        'page' => 'int64',
        'including_private' => null,
        'including_custom_fields' => null,
        'including_formats' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'q' => 'q',
        'sort' => 'sort',
        'direction' => 'direction',
        'per_page' => 'per_page',
        'page' => 'page',
        'including_private' => 'including_private',
        'including_custom_fields' => 'including_custom_fields',
        'including_formats' => 'including_formats'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'q' => 'setQ',
        'sort' => 'setSort',
        'direction' => 'setDirection',
        'per_page' => 'setPerPage',
        'page' => 'setPage',
        'including_private' => 'setIncludingPrivate',
        'including_custom_fields' => 'setIncludingCustomFields',
        'including_formats' => 'setIncludingFormats'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'q' => 'getQ',
        'sort' => 'getSort',
        'direction' => 'getDirection',
        'per_page' => 'getPerPage',
        'page' => 'getPage',
        'including_private' => 'getIncludingPrivate',
        'including_custom_fields' => 'getIncludingCustomFields',
        'including_formats' => 'getIncludingFormats'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const SORT_ID = 'id';
    const SORT_FORMAT_ID = 'format_id';
    const SORT_NAME = 'name';
    const SORT_KEYWORDS = 'keywords';
    const SORT_CREATED_AT = 'created_at';
    const DIRECTION_ASC = 'asc';
    const DIRECTION_DESC = 'desc';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getSortAllowableValues()
    {
        return [
            self::SORT_ID,
            self::SORT_FORMAT_ID,
            self::SORT_NAME,
            self::SORT_KEYWORDS,
            self::SORT_CREATED_AT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getDirectionAllowableValues()
    {
        return [
            self::DIRECTION_ASC,
            self::DIRECTION_DESC,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['q'] = isset($data['q']) ? $data['q'] : null;
        $this->container['sort'] = isset($data['sort']) ? $data['sort'] : 'id';
        $this->container['direction'] = isset($data['direction']) ? $data['direction'] : 'desc';
        $this->container['per_page'] = isset($data['per_page']) ? $data['per_page'] : 10;
        $this->container['page'] = isset($data['page']) ? $data['page'] : 1;
        $this->container['including_private'] = isset($data['including_private']) ? $data['including_private'] : false;
        $this->container['including_custom_fields'] = isset($data['including_custom_fields']) ? $data['including_custom_fields'] : false;
        $this->container['including_formats'] = isset($data['including_formats']) ? $data['including_formats'] : false;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getSortAllowableValues();
        if (!in_array($this->container['sort'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'sort', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getDirectionAllowableValues();
        if (!in_array($this->container['direction'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'direction', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getSortAllowableValues();
        if (!in_array($this->container['sort'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getDirectionAllowableValues();
        if (!in_array($this->container['direction'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets q
     * @return string
     */
    public function getQ()
    {
        return $this->container['q'];
    }

    /**
     * Sets q
     * @param string $q 検索文字列を指定します。template名、キーワードが対象となります。
     * @return $this
     */
    public function setQ($q)
    {
        $this->container['q'] = $q;

        return $this;
    }

    /**
     * Gets sort
     * @return string
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     * @param string $sort id/format_id/name/keywords/created_atを指定できます。
     * @return $this
     */
    public function setSort($sort)
    {
        $allowed_values = $this->getSortAllowableValues();
        if (!is_null($sort) && !in_array($sort, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sort', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets direction
     * @return string
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     * @param string $direction 項目の並び順を指定します。asc(昇順)/desc(降順)
     * @return $this
     */
    public function setDirection($direction)
    {
        $allowed_values = $this->getDirectionAllowableValues();
        if (!is_null($direction) && !in_array($direction, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'direction', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets per_page
     * @return int
     */
    public function getPerPage()
    {
        return $this->container['per_page'];
    }

    /**
     * Sets per_page
     * @param int $per_page 1ページあたりの取得項目数。最大:50件
     * @return $this
     */
    public function setPerPage($per_page)
    {
        $this->container['per_page'] = $per_page;

        return $this;
    }

    /**
     * Gets page
     * @return int
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     * @param int $page ページ番号を指定。
     * @return $this
     */
    public function setPage($page)
    {
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets including_private
     * @return bool
     */
    public function getIncludingPrivate()
    {
        return $this->container['including_private'];
    }

    /**
     * Sets including_private
     * @param bool $including_private 非公開のテンプレートを含めるかどうかを指定します。
     * @return $this
     */
    public function setIncludingPrivate($including_private)
    {
        $this->container['including_private'] = $including_private;

        return $this;
    }

    /**
     * Gets including_custom_fields
     * @return bool
     */
    public function getIncludingCustomFields()
    {
        return $this->container['including_custom_fields'];
    }

    /**
     * Sets including_custom_fields
     * @param bool $including_custom_fields 可変領域の情報を含めるかを設定します。
     * @return $this
     */
    public function setIncludingCustomFields($including_custom_fields)
    {
        $this->container['including_custom_fields'] = $including_custom_fields;

        return $this;
    }

    /**
     * Gets including_formats
     * @return bool
     */
    public function getIncludingFormats()
    {
        return $this->container['including_formats'];
    }

    /**
     * Sets including_formats
     * @param bool $including_formats フォーマットの情報を含めるかを設定します。
     * @return $this
     */
    public function setIncludingFormats($including_formats)
    {
        $this->container['including_formats'] = $including_formats;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


