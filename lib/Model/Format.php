<?php
/**
 * Format
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * コーデンベルク APIリファレンス
 *
 * 印刷APIプラットフォーム「[コーデンベルク](https://codenberg.io/)」はさまざまなシステムと連携することができるように、WebAPIを公開しています。コーデンベルク APIを使って、印刷物の注文はもちろん、テンプレートの登録や可変領域の設定ができます。コーデンベルク APIは、RESTfulな設計なのでかんたんにシステム連携できます。
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Format Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Format implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Format';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'display_id' => 'string',
        'name' => 'string',
        'category' => 'string',
        'width' => 'int',
        'height' => 'int',
        'depth' => 'int',
        'moq' => 'int',
        'spq' => 'int',
        'lot_price' => '\Swagger\Client\Model\LotPrice[]',
        'purpose' => 'string[]',
        'note' => 'string',
        'file' => 'string',
        'main_image' => 'string',
        'selectable_papers' => '\Swagger\Client\Model\Paper[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'display_id' => null,
        'name' => null,
        'category' => null,
        'width' => 'int64',
        'height' => 'int64',
        'depth' => 'int64',
        'moq' => 'int64',
        'spq' => 'int64',
        'lot_price' => null,
        'purpose' => null,
        'note' => null,
        'file' => null,
        'main_image' => null,
        'selectable_papers' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'display_id' => 'display_id',
        'name' => 'name',
        'category' => 'category',
        'width' => 'width',
        'height' => 'height',
        'depth' => 'depth',
        'moq' => 'moq',
        'spq' => 'spq',
        'lot_price' => 'lot_price',
        'purpose' => 'purpose',
        'note' => 'note',
        'file' => 'file',
        'main_image' => 'main_image',
        'selectable_papers' => 'selectable_papers'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'display_id' => 'setDisplayId',
        'name' => 'setName',
        'category' => 'setCategory',
        'width' => 'setWidth',
        'height' => 'setHeight',
        'depth' => 'setDepth',
        'moq' => 'setMoq',
        'spq' => 'setSpq',
        'lot_price' => 'setLotPrice',
        'purpose' => 'setPurpose',
        'note' => 'setNote',
        'file' => 'setFile',
        'main_image' => 'setMainImage',
        'selectable_papers' => 'setSelectablePapers'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'display_id' => 'getDisplayId',
        'name' => 'getName',
        'category' => 'getCategory',
        'width' => 'getWidth',
        'height' => 'getHeight',
        'depth' => 'getDepth',
        'moq' => 'getMoq',
        'spq' => 'getSpq',
        'lot_price' => 'getLotPrice',
        'purpose' => 'getPurpose',
        'note' => 'getNote',
        'file' => 'getFile',
        'main_image' => 'getMainImage',
        'selectable_papers' => 'getSelectablePapers'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['display_id'] = isset($data['display_id']) ? $data['display_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['depth'] = isset($data['depth']) ? $data['depth'] : null;
        $this->container['moq'] = isset($data['moq']) ? $data['moq'] : null;
        $this->container['spq'] = isset($data['spq']) ? $data['spq'] : null;
        $this->container['lot_price'] = isset($data['lot_price']) ? $data['lot_price'] : null;
        $this->container['purpose'] = isset($data['purpose']) ? $data['purpose'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['file'] = isset($data['file']) ? $data['file'] : null;
        $this->container['main_image'] = isset($data['main_image']) ? $data['main_image'] : null;
        $this->container['selectable_papers'] = isset($data['selectable_papers']) ? $data['selectable_papers'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets display_id
     * @return string
     */
    public function getDisplayId()
    {
        return $this->container['display_id'];
    }

    /**
     * Sets display_id
     * @param string $display_id
     * @return $this
     */
    public function setDisplayId($display_id)
    {
        $this->container['display_id'] = $display_id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets category
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     * @param string $category カテゴリ名
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets width
     * @return int
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     * @param int $width 幅
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets height
     * @return int
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     * @param int $height 高さ
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets depth
     * @return int
     */
    public function getDepth()
    {
        return $this->container['depth'];
    }

    /**
     * Sets depth
     * @param int $depth 奥行き
     * @return $this
     */
    public function setDepth($depth)
    {
        $this->container['depth'] = $depth;

        return $this;
    }

    /**
     * Gets moq
     * @return int
     */
    public function getMoq()
    {
        return $this->container['moq'];
    }

    /**
     * Sets moq
     * @param int $moq 最小注文数
     * @return $this
     */
    public function setMoq($moq)
    {
        $this->container['moq'] = $moq;

        return $this;
    }

    /**
     * Gets spq
     * @return int
     */
    public function getSpq()
    {
        return $this->container['spq'];
    }

    /**
     * Sets spq
     * @param int $spq 注文単位
     * @return $this
     */
    public function setSpq($spq)
    {
        $this->container['spq'] = $spq;

        return $this;
    }

    /**
     * Gets lot_price
     * @return \Swagger\Client\Model\LotPrice[]
     */
    public function getLotPrice()
    {
        return $this->container['lot_price'];
    }

    /**
     * Sets lot_price
     * @param \Swagger\Client\Model\LotPrice[] $lot_price 注文数別の注文価格
     * @return $this
     */
    public function setLotPrice($lot_price)
    {
        $this->container['lot_price'] = $lot_price;

        return $this;
    }

    /**
     * Gets purpose
     * @return string[]
     */
    public function getPurpose()
    {
        return $this->container['purpose'];
    }

    /**
     * Sets purpose
     * @param string[] $purpose 目的
     * @return $this
     */
    public function setPurpose($purpose)
    {
        $this->container['purpose'] = $purpose;

        return $this;
    }

    /**
     * Gets note
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     * @param string $note 備考
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets file
     * @return string
     */
    public function getFile()
    {
        return $this->container['file'];
    }

    /**
     * Sets file
     * @param string $file プロダクトのテンプレートファイル
     * @return $this
     */
    public function setFile($file)
    {
        $this->container['file'] = $file;

        return $this;
    }

    /**
     * Gets main_image
     * @return string
     */
    public function getMainImage()
    {
        return $this->container['main_image'];
    }

    /**
     * Sets main_image
     * @param string $main_image プロダクトのサムネール画像
     * @return $this
     */
    public function setMainImage($main_image)
    {
        $this->container['main_image'] = $main_image;

        return $this;
    }

    /**
     * Gets selectable_papers
     * @return \Swagger\Client\Model\Paper[]
     */
    public function getSelectablePapers()
    {
        return $this->container['selectable_papers'];
    }

    /**
     * Sets selectable_papers
     * @param \Swagger\Client\Model\Paper[] $selectable_papers 利用可能な紙
     * @return $this
     */
    public function setSelectablePapers($selectable_papers)
    {
        $this->container['selectable_papers'] = $selectable_papers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


