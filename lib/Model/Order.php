<?php
/**
 * Order
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * コーデンベルク APIリファレンス
 *
 * 印刷APIプラットフォーム「[コーデンベルク](https://codenberg.io/)」はさまざまなシステムと連携することができるように、WebAPIを公開しています。コーデンベルク APIを使って、印刷物の注文はもちろん、テンプレートの登録や可変領域の設定ができます。コーデンベルク APIは、RESTfulな設計なのでかんたんにシステム連携できます。
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Order Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Order implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'display_id' => 'string',
        'printing_fee' => 'int',
        'sub_total' => 'int',
        'consumption_tax' => 'int',
        'delivery_fee' => 'int',
        'total' => 'int',
        'total_quantity' => 'int',
        'total_number' => 'int',
        'orders' => '\Swagger\Client\Model\OrderDetail[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'display_id' => null,
        'printing_fee' => 'int64',
        'sub_total' => 'int64',
        'consumption_tax' => 'int64',
        'delivery_fee' => 'int64',
        'total' => 'int64',
        'total_quantity' => 'int64',
        'total_number' => 'int64',
        'orders' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'display_id' => 'display_id',
        'printing_fee' => 'printing_fee',
        'sub_total' => 'sub_total',
        'consumption_tax' => 'consumption_tax',
        'delivery_fee' => 'delivery_fee',
        'total' => 'total',
        'total_quantity' => 'total_quantity',
        'total_number' => 'total_number',
        'orders' => 'orders'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'display_id' => 'setDisplayId',
        'printing_fee' => 'setPrintingFee',
        'sub_total' => 'setSubTotal',
        'consumption_tax' => 'setConsumptionTax',
        'delivery_fee' => 'setDeliveryFee',
        'total' => 'setTotal',
        'total_quantity' => 'setTotalQuantity',
        'total_number' => 'setTotalNumber',
        'orders' => 'setOrders'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'display_id' => 'getDisplayId',
        'printing_fee' => 'getPrintingFee',
        'sub_total' => 'getSubTotal',
        'consumption_tax' => 'getConsumptionTax',
        'delivery_fee' => 'getDeliveryFee',
        'total' => 'getTotal',
        'total_quantity' => 'getTotalQuantity',
        'total_number' => 'getTotalNumber',
        'orders' => 'getOrders'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['display_id'] = isset($data['display_id']) ? $data['display_id'] : null;
        $this->container['printing_fee'] = isset($data['printing_fee']) ? $data['printing_fee'] : null;
        $this->container['sub_total'] = isset($data['sub_total']) ? $data['sub_total'] : null;
        $this->container['consumption_tax'] = isset($data['consumption_tax']) ? $data['consumption_tax'] : null;
        $this->container['delivery_fee'] = isset($data['delivery_fee']) ? $data['delivery_fee'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['total_quantity'] = isset($data['total_quantity']) ? $data['total_quantity'] : null;
        $this->container['total_number'] = isset($data['total_number']) ? $data['total_number'] : null;
        $this->container['orders'] = isset($data['orders']) ? $data['orders'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets display_id
     * @return string
     */
    public function getDisplayId()
    {
        return $this->container['display_id'];
    }

    /**
     * Sets display_id
     * @param string $display_id 注文番号
     * @return $this
     */
    public function setDisplayId($display_id)
    {
        $this->container['display_id'] = $display_id;

        return $this;
    }

    /**
     * Gets printing_fee
     * @return int
     */
    public function getPrintingFee()
    {
        return $this->container['printing_fee'];
    }

    /**
     * Sets printing_fee
     * @param int $printing_fee 印刷費
     * @return $this
     */
    public function setPrintingFee($printing_fee)
    {
        $this->container['printing_fee'] = $printing_fee;

        return $this;
    }

    /**
     * Gets sub_total
     * @return int
     */
    public function getSubTotal()
    {
        return $this->container['sub_total'];
    }

    /**
     * Sets sub_total
     * @param int $sub_total 小計
     * @return $this
     */
    public function setSubTotal($sub_total)
    {
        $this->container['sub_total'] = $sub_total;

        return $this;
    }

    /**
     * Gets consumption_tax
     * @return int
     */
    public function getConsumptionTax()
    {
        return $this->container['consumption_tax'];
    }

    /**
     * Sets consumption_tax
     * @param int $consumption_tax 消費税
     * @return $this
     */
    public function setConsumptionTax($consumption_tax)
    {
        $this->container['consumption_tax'] = $consumption_tax;

        return $this;
    }

    /**
     * Gets delivery_fee
     * @return int
     */
    public function getDeliveryFee()
    {
        return $this->container['delivery_fee'];
    }

    /**
     * Sets delivery_fee
     * @param int $delivery_fee 梱包・配送費
     * @return $this
     */
    public function setDeliveryFee($delivery_fee)
    {
        $this->container['delivery_fee'] = $delivery_fee;

        return $this;
    }

    /**
     * Gets total
     * @return int
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     * @param int $total 合計
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets total_quantity
     * @return int
     */
    public function getTotalQuantity()
    {
        return $this->container['total_quantity'];
    }

    /**
     * Sets total_quantity
     * @param int $total_quantity 合計印刷数
     * @return $this
     */
    public function setTotalQuantity($total_quantity)
    {
        $this->container['total_quantity'] = $total_quantity;

        return $this;
    }

    /**
     * Gets total_number
     * @return int
     */
    public function getTotalNumber()
    {
        return $this->container['total_number'];
    }

    /**
     * Sets total_number
     * @param int $total_number 合計注文数（total_quantityのシノニム）
     * @return $this
     */
    public function setTotalNumber($total_number)
    {
        $this->container['total_number'] = $total_number;

        return $this;
    }

    /**
     * Gets orders
     * @return \Swagger\Client\Model\OrderDetail[]
     */
    public function getOrders()
    {
        return $this->container['orders'];
    }

    /**
     * Sets orders
     * @param \Swagger\Client\Model\OrderDetail[] $orders 注文明細一覧
     * @return $this
     */
    public function setOrders($orders)
    {
        $this->container['orders'] = $orders;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


